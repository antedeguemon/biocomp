s1 = "MFVLKGSVVQAFVLLSIVCLEITIADDGVRYVNAEWKRPEQSQEGRHSCTARRLEDNSEEVACSTEVKFRQRAPAEYANKIKKAKDKLRRLESQFDDCQQENDRKDRLIQLQANLTDTIHRLVTDSDIQALRSSWATLTAGADGRNNFGNNFVLWLLNTIPNIRERFEKFNAHQSDEALKNDNEFVKQVKLIVGGLQSFIDNLENPGQLQATIERLASVHLKMRPTIGLEYFRPLQENIAQYVASALGVGADDAAPKAWERLLNAFNEVLNSFANYNIGLSDTDKVALQSSWSRLTAGADGKRNAGVRLVLWMFNNVPNMRERFTKFNARQSDEALKTDAEFLKQVDAIIGGFETLINNLNDADLLLNRLESLADEHLEKKPAISSNYFGPLQKNIHLFIEGTLNFGSDSDEARAWTHLVGALNKVIKDHAIHNLGLSDIDRDALVSSWNQLTGRAGGSRNAGTNLVLWMLENVPNMRDQFSKFNARQSDDNLRKDAEFVRQVDLITGGLESLVDNVNNPIFLQEALVRLADAHLNLKPRVGLEYFGPLQRYIHAYIEKALGVSADSAAPRAWTDLLTAFNNVLKDRTFLRIVSDDDRRALQSSWSRLQSQAGNKQEAGIKLVTWLFDNVPNMRDRFTKFNAHSSDEALRANNEFLRQVDVIVGGLDSLINNVDNSDNFQAAIERLVDVHLHMSPSVGLEYFGPLQQNIRSYIQNALGVAADSAEARSWTNLFTAFNEFLADHTIQKIGLSPTDRKVLDRTWKQLTSGGKQEAGVKLVLWMFDQVPNMRDQFSKFDARKSEAELRNDAEFINQVNNIVGGLDSILNNLDKPGQLQAALERLADYHLDHKPRIGLEFFGPLQKYIHLYIESALNVAVGSEESRAWTDLLTALNKVIRDHAIDRLGLSDNDREAIDSSWKKLRSGAGGRRNAGIKLVQWMLRTIPNMRDRFNKFDAKQSDAALQRDPEFLAQVDRILGGVESLVNNVDDPVALKAAIDRLADAHLSFDPRVGLDYFGPLQTYIHDYIEEALGVGADSDEAKGWTDLFAAFNKVLKERTVLKIVSDNERAALRSSWDSLKSAAGGTQEAGVRLVLWMLQNVPNMRERFNKFNALQGDDALRADAEFVKQVERIAGGLESLINNVDNQGKLQAAIDRLVNAHLNFRPSVGLEYFQPLQENIYKYLESALIVAADSNEAKAWTHLLSAFNTVLREHSLEKIGLSDVDRKALESSWKKLTDAAGGSENAGTNLVFWLLDNVPNMRDRFTKFNAHQSNAALQDDDEFRNQVRAITRGIESFVNNVNNPAALQSSIENLVDAHLNFQPSIGLSYFGSVQQYIHLYIAKALGVASNSDEAKSWTNLFAAFNKVLKEHSLEKIGISDSDKRALVSSWKKLTAGGRQNFGVDLVLWMFNNVPNMREQFTKFDAKQSDADLRRDPNFLKQVNNIINGVGDLVDSVNDPGKLQANLERLTDVHLHFVPSVGPEFFGPLQKNIHTFIEQALGVGADSDEPKAWTDLIGAFNKVLNDHAIQHIGLSETDRRALDSSWKRLTAGENGVQKAGVNLVLWFFNNIPNMRERFTKFDANQADDALRADPEFQKQVNVIVGGLKSFLDSVNDPIALQANMDRVAEAHLSMDPVVGVPYFSALSQNIHRFIEISLGVTADSDESQAWTDLLAGFTRVVRNRAVLRKVSDSDKSAFVSSWNELIRKAASRRNAGVNLVLWLFNNVPNMRNHFTKFNGNQPDAALRNDQEFLNQVDRIAGGLESLVKNVNNPARFLDALERLSSAHLNMKPSIGLEYFGPLQQNIHTYIESALGVAAGSDEANAWTDVFGAFNEILKYSSVEKIGLSDSDKQALTSSWSSLIAEGKDTAGEKLVLWMFDNVPNMRARFTKFDATQSDEALRNDKEFRNQVNVIVGGLELLINSVNEPGQLQANLEKLVDDHLHMVPSVGLEYFGPLQKYIHLFIEKALGVSSNSVESKSWTNLLRAFNKVLKEHSVKKIGLSEEDRKAIVSSWRKLVGRAGGRDNAGTNLVLWMFENVPNMRDRFTKFNAYQPDSALRQDREFGAQVDRITSGLESLVNNVENPGQFQAALERLSTLHKNKTPSVGLQYFGPLQRYIHLYIEQNLNVASDSVESRAWTNLFASFNEVLKKA"
s2 = "MEKVPGEMEIERRERSEELSEAERKAVQAMWARLYANCEDVGVAILVRFFVNFPSAKQYFSQFKHMEDPLEMERSPQLRKHACRVMGALNTVVENLHDPDKVSSVLALVGKAHALKHKVEPVYFKILSGVILEVVAEEFASDFPPETQRAWAKLRGLIYSHVTAAYKEVGWVQQVPNATTPPATLPSSGP"

w = -2
def s(a,b)
  return 1 if a == b
  return -2 if a == "-" || b == "-"
  -1
end

def distance(s, w)
  s1, s2 = s[0], s[1]
  identity = (0..s1.length-1).select { |i| s1[i] == s2[i] }.length
  [(0..s1.length-1).map { |i|
    (s1[i] == s2[i] || (s1[i] != '-' && s2[i] != '-'))? s(s1[i], s2[i]) : w
  }.reduce(0, :+), (identity.to_f / s1.length.to_f)]
end

def traceback(matrix, s1, s2, a1='', a2='', i=0, j=0)
  return [a1.reverse, a2.reverse] if matrix[i][j] == 0 || matrix[i][j] == :none
  case matrix[i][j]
  when :diagonal
    traceback(matrix, s1, s2, a1+s1[i-1], a2+s2[j-1], i-1, j-1)
  when :up
    traceback(matrix, s1, s2, a1+'-', a2+s2[j-1], i, j-1)
  when :left
    traceback(matrix, s1, s2, a1+s1[i-1], a2+'-', i-1, j)
  end
end

s_matrix = (0..s1.length).map {(0..s2.length).map { |_| 0 }}
pointers = (0..s1.length).map {(0..s2.length).map { |_| 0 }}
max_pair, max_score = [0, 0], 0
(1..(s1.length)).each do |i|
  (1..(s2.length)).each do |j|
    a = s_matrix[i-1][j-1] + s(s1[i-1], s2[j-1]) # diagonal
    b = s_matrix[i-1][j] + w # esquerda
    c = s_matrix[i][j-1] + w # cima
    s_matrix[i][j] = [0, a, b, c].max
    max_scores = { 0 => :none, b => :left, c => :up, a => :diagonal }
    pointers[i][j] = max_scores[s_matrix[i][j]]
    max_pair, max_score = [i, j], s_matrix[i][j] if s_matrix[i][j] >= max_score
  end
end

alinhados = traceback(pointers, s1, s2, '', '', max_pair[0], max_pair[1])
print "Alinhadas:\n"
print "#{alinhados[0]}\n"
print "#{alinhados[1]}\n\n"
distancias = distance(alinhados, w)
print "Score: #{distancias[0]}\n"
print "Identidade: #{distancias[1]}\n"
